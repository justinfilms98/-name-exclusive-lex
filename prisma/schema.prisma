generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// CONTENT SALES PLATFORM MODELS
// =====================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user") // "user", "admin"
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchases Purchase[]
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Collection {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  media CollectionMedia[]

  @@map("collections")
}

model CollectionMedia {
  id               String    @id @default(cuid())
  collectionId     String    @map("collection_id")
  title            String
  description      String?
  videoUrl         String?   @map("video_url")
  thumbnailUrl     String?   @map("thumbnail_url")
  price            Decimal?  @db.Decimal(10, 2)
  durationSeconds  Int?      @map("duration_seconds")
  seoTags          String[]  @map("seo_tags")
  displayOrder     Int?      @map("display_order")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  purchases  Purchase[]

  @@map("collection_media")
}

model HeroVideo {
  id            String    @id @default(cuid())
  title         String?
  subtitle      String?
  videoUrl      String    @map("video_url")
  thumbnailUrl  String?   @map("thumbnail_url")
  displayOrder  Int?      @map("display_order")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("hero_videos")
}

model Purchase {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  mediaId         String    @map("media_id")
  amountPaid      Decimal?  @map("amount_paid") @db.Decimal(10, 2)
  stripeChargeId  String?   @map("stripe_charge_id")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  media CollectionMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model Log {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now())

  @@map("logs")
}

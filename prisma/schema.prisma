generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String      @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            String      @default("user")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accounts        Account[]
  moderatedVideos HeroVideo[] @relation("ModeratedVideos")
  purchases       Purchase[]
  sessions        Session[]
  videos          Video[]

  @@map("User")
  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model Video {
  id           String     @id @default(cuid())
  title        String
  description  String
  price        Float
  type         String
  videoKey     String
  thumbnailKey String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  creatorId    String
  purchases    Purchase[]
  creator      User       @relation(fields: [creatorId], references: [id])

  @@map("Video")
  @@schema("public")
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@schema("public")
}

model HeroVideo {
  id              Int                    @id @default(autoincrement())
  title           String
  description     String
  thumbnail       String
  videoUrl        String
  order           Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  ageRating       String                 @default("PG")
  category        String                 @default("entertainment")
  moderatedAt     DateTime?
  moderatedBy     String?
  price           Float                  @default(0.00)
  rejectionReason String?
  status          String                 @default("draft")
  tags            String[]
  moderationLogs  ContentModerationLog[]
  moderator       User?                  @relation("ModeratedVideos", fields: [moderatedBy], references: [id])
  analytics       VideoAnalytics[]
  pricing         VideoPricing[]         @relation("CollectionVideoPricing")

  @@index([status])
  @@index([category])
  @@index([ageRating])
  @@schema("public")
}

model CollectionVideo {
  id            Int      @id @default(autoincrement())
  collection    String
  title         String
  description   String
  thumbnail     String
  videoUrl      String
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  price         Float    @default(0.00)
  thumbnailPath String?
  videoPath     String?

  @@schema("public")
}

model VideoAnalytics {
  id          Int       @id @default(autoincrement())
  videoId     Int
  views       Int       @default(0)
  uniqueViews Int       @default(0)
  watchTime   Int       @default(0)
  likes       Int       @default(0)
  shares      Int       @default(0)
  comments    Int       @default(0)
  revenue     Float     @default(0.00)
  date        DateTime  @default(now())
  country     String?
  device      String?
  referrer    String?
  video       HeroVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId, date])
  @@index([country])
  @@index([device])
  @@schema("public")
}

model VideoPricing {
  id        Int       @id @default(autoincrement())
  videoId   Int
  type      String
  price     Float
  currency  String    @default("USD")
  duration  Int?
  startDate DateTime  @default(now())
  endDate   DateTime?
  discount  Float?
  promoCode String?
  region    String?
  isActive  Boolean   @default(true)
  video     HeroVideo @relation("CollectionVideoPricing", fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId, type])
  @@index([isActive])
  @@index([promoCode])
  @@schema("public")
}

model ContentModerationLog {
  id          Int       @id @default(autoincrement())
  videoId     Int
  moderatorId String
  action      String
  reason      String?
  notes       String?
  createdAt   DateTime  @default(now())
  video       HeroVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([moderatorId])
  @@index([action])
  @@schema("public")
}

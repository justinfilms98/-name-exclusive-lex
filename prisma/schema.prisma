generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

// --------------------------------------------------------------------------------
// Public Schema - new, simplified models
// --------------------------------------------------------------------------------

model Collection {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  createdAt   DateTime? @default(now()) @db.Timestamptz

  media      CollectionMedia[]

  @@map("collections")
  @@schema("public")
}

model CollectionMedia {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  collectionId     String    @db.Uuid
  title            String
  description      String?
  videoUrl         String?   @map("video_url")
  thumbnailUrl     String?   @map("thumbnail_url")
  price            Decimal?  @db.Decimal(10, 2)
  durationSeconds  Int?      @map("duration_seconds")
  seoTags          String[]  @map("seo_tags")
  displayOrder     Int?      @map("display_order")
  createdAt        DateTime? @default(now()) @db.Timestamptz @map("created_at")

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  purchases  Purchase[]

  @@map("collection_media")
  @@schema("public")
}

model HeroVideo {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String?
  subtitle      String?
  videoUrl      String    @map("video_url")
  displayOrder  Int?      @map("display_order")
  createdAt     DateTime? @default(now()) @db.Timestamptz @map("created_at")

  @@map("hero_videos")
  @@schema("public")
}

model Purchase {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  mediaId         String    @map("media_id") @db.Uuid
  amountPaid      Decimal?  @map("amount_paid") @db.Decimal(10, 2)
  stripeChargeId  String?   @map("stripe_charge_id")
  expiresAt       DateTime? @map("expires_at") @db.Timestamptz
  createdAt       DateTime? @default(now()) @db.Timestamptz @map("created_at")

  media      CollectionMedia @relation(fields: [mediaId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user       users      @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("purchases")
  @@schema("public")
}


// --------------------------------------------------------------------------------
// Auth Schema - managed by Supabase
// --------------------------------------------------------------------------------

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.VarChar(64)
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id            String           @id @db.Uuid
  user_id       String           @db.Uuid
  friendly_name String?
  factor_type   factor_type
  status        factor_status
  created_at    DateTime         @db.Timestamptz(6)
  updated_at    DateTime         @db.Timestamptz(6)
  secret        String?
  users         users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mfa_challenges mfa_challenges[]

  @@index([user_id, created_at], map: "mfa_factors_user_id_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id              String              @id @db.Uuid
  user_id         String              @db.Uuid
  token_type      one_time_token_type
  token_hash      String
  relates_to      String
  created_at      DateTime            @db.Timestamptz(6)
  updated_at      DateTime            @db.Timestamptz(6)
  users           users?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([relates_to])
  @@index([user_id, token_type])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          Int       @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([token])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id              String            @id @db.Uuid
  sso_provider_id String?           @db.Uuid
  entity_id       String            @unique
  metadata_xml    String
  metadata_url    String?
  attribute_mapping Json?
  created_at      DateTime?         @db.Timestamptz(6)
  updated_at      DateTime?         @db.Timestamptz(6)
  sso_providers   sso_providers?    @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  saml_relay_states saml_relay_states[]

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String          @id @db.Uuid
  sso_provider_id String?         @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?         @db.VarChar(64)
  created_at      DateTime?       @db.Timestamptz(6)
  updated_at      DateTime?       @db.Timestamptz(6)
  flow_state_id   String?         @db.Uuid
  flow_state      flow_state?     @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  saml_providers  saml_providers? @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamptz(6)
  user_agent     String?
  ip             String?          @db.VarChar(64)
  tag            String?
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]

  @@index([user_id])
  @@index([user_id, created_at], map: "sessions_user_id_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sso_domains {
  id              String         @id @db.Uuid
  sso_provider_id String?        @db.Uuid
  domain          String         @unique
  created_at      DateTime?      @db.Timestamptz(6)
  updated_at      DateTime?      @db.Timestamptz(6)
  sso_providers   sso_providers? @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sso_providers {
  id             String           @id @db.Uuid
  resource_id    String?          @unique
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  saml_providers saml_providers[]
  sso_domains    sso_domains[]

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  instance_id              String?           @db.Uuid
  id                       String            @id @db.Uuid
  aud                      String?           @db.VarChar(255)
  role                     String?           @db.VarChar(255)
  email                    String?           @unique(map: "users_email_partial_key") @db.VarChar(255)
  encrypted_password       String?           @db.VarChar(255)
  email_confirmed_at       DateTime?         @db.Timestamptz(6)
  invited_at               DateTime?         @db.Timestamptz(6)
  confirmation_token       String?           @unique @db.VarChar(255)
  confirmation_sent_at     DateTime?         @db.Timestamptz(6)
  recovery_token           String?           @unique(map: "users_recovery_token_key") @db.VarChar(255)
  recovery_sent_at         DateTime?         @db.Timestamptz(6)
  email_change_token_new   String?           @unique(map: "users_email_change_token_new_key") @db.VarChar(255)
  email_change             String?           @db.VarChar(255)
  email_change_sent_at     DateTime?         @db.Timestamptz(6)
  last_sign_in_at          DateTime?         @db.Timestamptz(6)
  raw_app_meta_data        Json?
  raw_user_meta_data       Json?
  is_sso_user              Boolean?          @default(false)
  created_at               DateTime?         @db.Timestamptz(6)
  updated_at               DateTime?         @db.Timestamptz(6)
  phone                    String?           @unique(map: "users_phone_key")
  phone_confirmed_at       DateTime?         @db.Timestamptz(6)
  phone_change             String?           @default("")
  phone_change_token       String?           @default("") @db.VarChar(255)
  phone_change_sent_at     DateTime?         @db.Timestamptz(6)
  confirmed_at             DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current String?           @unique(map: "users_email_change_token_current_key") @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until             DateTime?         @db.Timestamptz(6)
  reauthentication_token   String?           @unique(map: "users_reauthentication_token_key") @default("") @db.VarChar(255)
  reauthentication_sent_at DateTime?         @db.Timestamptz(6)
  is_super_admin           Boolean?
  deleted_at               DateTime?         @db.Timestamptz(6)
  identities               identities[]
  mfa_factors              mfa_factors[]
  one_time_tokens          one_time_tokens[]
  sessions                 sessions[]
  purchases                Purchase[]

  @@index([instance_id])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Collection {
  id          String            @id @default(cuid())
  title       String
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  videos      CollectionVideo[]
}

model CollectionVideo {
  id           String     @id @default(cuid())
  title        String
  description  String
  thumbnail    String
  videoUrl     String
  order        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  price        Int
  durationMinutes Int
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
  purchases    Purchase[]
}

model ContentModerationLog {
  id          Int       @id @default(autoincrement())
  videoId     Int
  moderatorId String
  action      String
  reason      String?
  notes       String?
  createdAt   DateTime  @default(now())
  HeroVideo   HeroVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([moderatorId])
  @@index([videoId])
}

model HeroVideo {
  id                   Int                    @id @default(autoincrement())
  title                String
  description          String
  thumbnail            String
  videoUrl             String
  order                Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  ageRating            String                 @default("PG")
  category             String                 @default("entertainment")
  moderatedAt          DateTime?
  moderatedBy          String?
  price                Float                  @default(0.00)
  rejectionReason      String?
  status               String                 @default("draft")
  tags                 String[]
  moderated            Boolean                @default(false)
  ContentModerationLog ContentModerationLog[]
  User                 User?                  @relation(fields: [moderatedBy], references: [id])
  VideoAnalytics       VideoAnalytics[]
  VideoPricing         VideoPricing[]

  @@index([ageRating])
  @@index([category])
  @@index([status])
}

model Purchase {
  id                String          @id
  userId            String
  createdAt         DateTime        @default(now())
  expiresAt         DateTime
  collectionVideoId String
  CollectionVideo   CollectionVideo @relation(fields: [collectionVideoId], references: [id])
  User              User            @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String      @default("user")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Account       Account[]
  HeroVideo     HeroVideo[]
  Purchase      Purchase[]
  Session       Session[]
  Video         Video[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           String   @id
  title        String
  description  String
  price        Float
  type         String
  videoKey     String
  thumbnailKey String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  creatorId    String
  User         User     @relation(fields: [creatorId], references: [id])
}

model VideoAnalytics {
  id          Int       @id @default(autoincrement())
  videoId     Int
  views       Int       @default(0)
  uniqueViews Int       @default(0)
  watchTime   Int       @default(0)
  likes       Int       @default(0)
  shares      Int       @default(0)
  comments    Int       @default(0)
  revenue     Float     @default(0.00)
  date        DateTime  @default(now())
  country     String?
  device      String?
  referrer    String?
  HeroVideo   HeroVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([country])
  @@index([device])
  @@index([videoId, date])
}

model VideoPricing {
  id        Int       @id @default(autoincrement())
  videoId   Int
  type      String
  price     Float
  currency  String    @default("USD")
  duration  Int?
  startDate DateTime  @default(now())
  endDate   DateTime?
  discount  Float?
  promoCode String?
  region    String?
  isActive  Boolean   @default(true)
  HeroVideo HeroVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([promoCode])
  @@index([videoId, type])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  purchases     Purchase[]
  // userVideos    Video[]   @relation("VideoUser")

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          String     @id @default(cuid())
  title       String
  description String
  price       Float
  type        String     // 'monthly' or 'yearly'
  videoKey    String
  thumbnailKey String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creatorId   String
  creator     User       @relation(fields: [creatorId], references: [id])
  purchases   Purchase[]
  // user        User       @relation("VideoUser", fields: [creatorId], references: [id])
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model HeroVideo {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  thumbnail   String   // URL to the thumbnail image
  videoUrl    String   // URL to the video file
  order       Int      // 1, 2, or 3 for the hero slot
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CollectionVideo {
  id          Int      @id @default(autoincrement())
  collection  String   // Name or ID of the collection
  title       String
  description String
  thumbnail   String   // URL to the thumbnail image
  videoUrl    String   // URL to the video file
  order       Int      // 1-20 for the slot in the collection
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 